using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;
using System.Web.Routing;

namespace RezRouting.Tests.Shared.Expectations
{
    /// <summary>
    /// Builds list of expectations around outbound URLs to verify against a collection of routes
    /// </summary>
    public class UrlExpectations
    {
        private readonly UrlHelper urlHelper;
        private readonly List<UrlExpectation> expectations = new List<UrlExpectation>();

        public UrlExpectations(RouteCollection routes)
        {
            this.urlHelper = new UrlHelper(TestRequestContextBuilder.Create(), routes);
        }

        /// <summary>
        /// Defines expectations of URL that will be generated by a specific route
        /// </summary>
        /// <returns></returns>
        public UrlExpectations ForRoute(string routeName, object otherRouteValues, string url)
        {
            var expectation = UrlExpectation.ForRoute(urlHelper, routeName, otherRouteValues, url);
            expectations.Add(expectation);
            return this;
        }

        /// <summary>
        /// Defines expectations of URL that will be generated by a specific controller and action
        /// </summary>
        /// <returns></returns>
        public UrlExpectations ForAction(string controllerAction, object otherRouteValues, string url)
        {
            var action = ControllerActionInfo.Parse(controllerAction);
            var expectation = UrlExpectation.ForAction(urlHelper, action.Controller, action.Action, otherRouteValues, url);
            expectations.Add(expectation);
            return this;
        }

        /// <summary>
        /// Gets a set of arguments for each expectation as input to an XUnit theory, which needs a sequence of object
        /// arrays.
        /// </summary>
        public IEnumerable<object[]> AsPropertyData()
        {
            return expectations.Select(expectation => new object[] { expectation });
        }
    }
}